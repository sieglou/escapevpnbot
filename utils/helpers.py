"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import logging
from datetime import datetime
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)


def format_subscription_info(username: str, subscription_info: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    try:
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        header = f"üëë <b>{username}, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:</b>\n\n"
        
        if subscription_info.get("is_active"):
            # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            expire_date = subscription_info.get("expire_at")
            days_left = subscription_info.get("days_left", 0)
            
            if expire_date:
                formatted_date = expire_date.strftime("%d.%m.%Y %H:%M")
            else:
                formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            status_text = f"""‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω!</b> –î–æ: {formatted_date}
üìÖ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}
üéØ <b>–¢–∞—Ä–∏—Ñ:</b> üí• 1 –º–µ—Å—è—Ü (–ü—Ä–µ–º–∏—É–º)"""
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
            if days_left <= 1:
                status_text += "\n\n‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞! –ü—Ä–æ–¥–ª–∏—Ç–µ —Å–µ–π—á–∞—Å.</b>"
            elif days_left <= 3:
                status_text += f"\n\n‚ö†Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å.</b>"
            
        else:
            # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            status_text = """‚ùå <b>–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</b>
üìÖ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> 0
üéØ <b>–¢–∞—Ä–∏—Ñ:</b> –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏

üí° <b>–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN!</b>"""
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        footer = """

üíé <b>–ü–æ–ª—É—á–∞–π 100‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"</b>

‚ùì <b>–ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7. –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ–º–æ—â—å"</b>"""
        
        return header + status_text + footer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
        return f"üëë <b>{username}, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:</b>\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"


def format_currency(amount: float, currency: str = "‚ÇΩ") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å –≤–∞–ª—é—Ç–æ–π
    """
    return f"{amount:.0f}{currency}"


def calculate_subscription_savings(base_monthly_price: float, total_price: float, months: int) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    full_price = base_monthly_price * months
    savings = full_price - total_price
    return max(0, savings)


def calculate_discount_percentage(original_price: float, discounted_price: float) -> int:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏
    """
    if original_price <= 0:
        return 0
    
    discount = (original_price - discounted_price) / original_price * 100
    return max(0, int(discount))


def format_datetime(dt: datetime, format_string: str = "%d.%m.%Y %H:%M") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    """
    try:
        return dt.strftime(format_string)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã {dt}: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def validate_user_input(text: str, max_length: int = 100) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
    """
    if not text or not isinstance(text, str):
        return False
    
    if len(text.strip()) == 0 or len(text) > max_length:
        return False
    
    return True


def extract_referral_code(start_param: Optional[str]) -> Optional[int]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        if not start_param or not start_param.startswith("ref_"):
            return None
        
        referrer_id = int(start_param.replace("ref_", ""))
        return referrer_id if referrer_id > 0 else None
        
    except (ValueError, AttributeError):
        return None


def sanitize_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    """
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    import re
    clean_text = re.sub(r'<[^>]+>', '', text)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    return clean_text[:1000] if clean_text else ""


def is_valid_chat_id(chat_id: Any) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
    """
    try:
        chat_id_int = int(chat_id)
        # Telegram chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—ã—á–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        return chat_id_int > 0
    except (ValueError, TypeError):
        return False


def format_user_mention(first_name: Optional[str], username: Optional[str] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if first_name:
        name = first_name.strip()
        if len(name) > 20:
            name = name[:20] + "..."
        return name
    elif username:
        return f"@{username}"
    else:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
